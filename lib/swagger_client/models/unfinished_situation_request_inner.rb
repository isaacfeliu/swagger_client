=begin
#SEUR Public API

#<b>INFORMATION ABOUT THE API</b>  <b>AUTH</b>  All requests must be accompanied by an authentication header with a 'Bearer ' obtained through the SSO token URL:  https://servicios.apipre.seur.io/pic_token  <i>Simple cURL Example</i>  curl -X POST --data-urlencode \"grant_type=client_credentials\" --data-urlencode \"client_id=<>\" --data-urlencode \"client_secret=<>\" https://servicios.apipre.seur.io/pic_token

OpenAPI spec version: 1.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.39

=end

require 'date'

module SwaggerClient
  class UnfinishedSituationRequestInner
    attr_accessor :communication_date

    attr_accessor :origin_system

    attr_accessor :admin_unit_code_origin

    attr_accessor :admin_unit_code_destination

    attr_accessor :admin_unit_code_destination_cmn

    attr_accessor :message_type

    attr_accessor :ecb_type

    attr_accessor :ecb

    attr_accessor :square

    attr_accessor :center

    attr_accessor :cod_depot_lec

    attr_accessor :device

    attr_accessor :entrance_dock

    attr_accessor :parcel_weight

    attr_accessor :parcel_high

    attr_accessor :parcel_wide

    attr_accessor :parcel_long

    attr_accessor :group_ecb

    attr_accessor :alibi_id

    attr_accessor :situation_date

    attr_accessor :route

    attr_accessor :route_date

    attr_accessor :exit_dock

    attr_accessor :fleet_route_date

    attr_accessor :ribbon_exit_date

    attr_accessor :token

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'communication_date' => :'communicationDate',
        :'origin_system' => :'originSystem',
        :'admin_unit_code_origin' => :'adminUnitCodeOrigin',
        :'admin_unit_code_destination' => :'adminUnitCodeDestination',
        :'admin_unit_code_destination_cmn' => :'adminUnitCodeDestinationCmn',
        :'message_type' => :'messageType',
        :'ecb_type' => :'ecbType',
        :'ecb' => :'ecb',
        :'square' => :'square',
        :'center' => :'center',
        :'cod_depot_lec' => :'codDepotLec',
        :'device' => :'device',
        :'entrance_dock' => :'entranceDock',
        :'parcel_weight' => :'parcelWeight',
        :'parcel_high' => :'parcelHigh',
        :'parcel_wide' => :'parcelWide',
        :'parcel_long' => :'parcelLong',
        :'group_ecb' => :'groupEcb',
        :'alibi_id' => :'alibiId',
        :'situation_date' => :'situationDate',
        :'route' => :'route',
        :'route_date' => :'routeDate',
        :'exit_dock' => :'exitDock',
        :'fleet_route_date' => :'fleetRouteDate',
        :'ribbon_exit_date' => :'ribbonExitDate',
        :'token' => :'token'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'communication_date' => :'Date',
        :'origin_system' => :'String',
        :'admin_unit_code_origin' => :'String',
        :'admin_unit_code_destination' => :'String',
        :'admin_unit_code_destination_cmn' => :'String',
        :'message_type' => :'String',
        :'ecb_type' => :'String',
        :'ecb' => :'String',
        :'square' => :'Integer',
        :'center' => :'Integer',
        :'cod_depot_lec' => :'String',
        :'device' => :'String',
        :'entrance_dock' => :'String',
        :'parcel_weight' => :'Integer',
        :'parcel_high' => :'Integer',
        :'parcel_wide' => :'Integer',
        :'parcel_long' => :'Integer',
        :'group_ecb' => :'String',
        :'alibi_id' => :'String',
        :'situation_date' => :'Date',
        :'route' => :'String',
        :'route_date' => :'Date',
        :'exit_dock' => :'String',
        :'fleet_route_date' => :'Date',
        :'ribbon_exit_date' => :'Date',
        :'token' => :'Array<UnfinishedSituationRequestInnerToken>'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'communicationDate')
        self.communication_date = attributes[:'communicationDate']
      end

      if attributes.has_key?(:'originSystem')
        self.origin_system = attributes[:'originSystem']
      end

      if attributes.has_key?(:'adminUnitCodeOrigin')
        self.admin_unit_code_origin = attributes[:'adminUnitCodeOrigin']
      end

      if attributes.has_key?(:'adminUnitCodeDestination')
        self.admin_unit_code_destination = attributes[:'adminUnitCodeDestination']
      end

      if attributes.has_key?(:'adminUnitCodeDestinationCmn')
        self.admin_unit_code_destination_cmn = attributes[:'adminUnitCodeDestinationCmn']
      end

      if attributes.has_key?(:'messageType')
        self.message_type = attributes[:'messageType']
      end

      if attributes.has_key?(:'ecbType')
        self.ecb_type = attributes[:'ecbType']
      end

      if attributes.has_key?(:'ecb')
        self.ecb = attributes[:'ecb']
      end

      if attributes.has_key?(:'square')
        self.square = attributes[:'square']
      end

      if attributes.has_key?(:'center')
        self.center = attributes[:'center']
      end

      if attributes.has_key?(:'codDepotLec')
        self.cod_depot_lec = attributes[:'codDepotLec']
      end

      if attributes.has_key?(:'device')
        self.device = attributes[:'device']
      end

      if attributes.has_key?(:'entranceDock')
        self.entrance_dock = attributes[:'entranceDock']
      end

      if attributes.has_key?(:'parcelWeight')
        self.parcel_weight = attributes[:'parcelWeight']
      end

      if attributes.has_key?(:'parcelHigh')
        self.parcel_high = attributes[:'parcelHigh']
      end

      if attributes.has_key?(:'parcelWide')
        self.parcel_wide = attributes[:'parcelWide']
      end

      if attributes.has_key?(:'parcelLong')
        self.parcel_long = attributes[:'parcelLong']
      end

      if attributes.has_key?(:'groupEcb')
        self.group_ecb = attributes[:'groupEcb']
      end

      if attributes.has_key?(:'alibiId')
        self.alibi_id = attributes[:'alibiId']
      end

      if attributes.has_key?(:'situationDate')
        self.situation_date = attributes[:'situationDate']
      end

      if attributes.has_key?(:'route')
        self.route = attributes[:'route']
      end

      if attributes.has_key?(:'routeDate')
        self.route_date = attributes[:'routeDate']
      end

      if attributes.has_key?(:'exitDock')
        self.exit_dock = attributes[:'exitDock']
      end

      if attributes.has_key?(:'fleetRouteDate')
        self.fleet_route_date = attributes[:'fleetRouteDate']
      end

      if attributes.has_key?(:'ribbonExitDate')
        self.ribbon_exit_date = attributes[:'ribbonExitDate']
      end

      if attributes.has_key?(:'token')
        if (value = attributes[:'token']).is_a?(Array)
          self.token = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          communication_date == o.communication_date &&
          origin_system == o.origin_system &&
          admin_unit_code_origin == o.admin_unit_code_origin &&
          admin_unit_code_destination == o.admin_unit_code_destination &&
          admin_unit_code_destination_cmn == o.admin_unit_code_destination_cmn &&
          message_type == o.message_type &&
          ecb_type == o.ecb_type &&
          ecb == o.ecb &&
          square == o.square &&
          center == o.center &&
          cod_depot_lec == o.cod_depot_lec &&
          device == o.device &&
          entrance_dock == o.entrance_dock &&
          parcel_weight == o.parcel_weight &&
          parcel_high == o.parcel_high &&
          parcel_wide == o.parcel_wide &&
          parcel_long == o.parcel_long &&
          group_ecb == o.group_ecb &&
          alibi_id == o.alibi_id &&
          situation_date == o.situation_date &&
          route == o.route &&
          route_date == o.route_date &&
          exit_dock == o.exit_dock &&
          fleet_route_date == o.fleet_route_date &&
          ribbon_exit_date == o.ribbon_exit_date &&
          token == o.token
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [communication_date, origin_system, admin_unit_code_origin, admin_unit_code_destination, admin_unit_code_destination_cmn, message_type, ecb_type, ecb, square, center, cod_depot_lec, device, entrance_dock, parcel_weight, parcel_high, parcel_wide, parcel_long, group_ecb, alibi_id, situation_date, route, route_date, exit_dock, fleet_route_date, ribbon_exit_date, token].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
