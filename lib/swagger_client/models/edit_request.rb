=begin
#SEUR Public API

#<b>INFORMATION ABOUT THE API</b>  <b>AUTH</b>  All requests must be accompanied by an authentication header with a 'Bearer ' obtained through the SSO token URL:  https://servicios.apipre.seur.io/pic_token  <i>Simple cURL Example</i>  curl -X POST --data-urlencode \"grant_type=client_credentials\" --data-urlencode \"client_id=<>\" --data-urlencode \"client_secret=<>\" https://servicios.apipre.seur.io/pic_token

OpenAPI spec version: 1.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.39

=end

require 'date'

module SwaggerClient
  class EditRequest
    attr_accessor :shipment_code

    attr_accessor :ccc

    attr_accessor :franchise

    attr_accessor :date

    attr_accessor :reference

    attr_accessor :sender

    attr_accessor :receiver

    attr_accessor :weight

    attr_accessor :observations

    attr_accessor :delivery_on_saturday

    attr_accessor :declared_value

    attr_accessor :insured_value

    attr_accessor :cash_on_delivery_value

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'shipment_code' => :'shipmentCode',
        :'ccc' => :'ccc',
        :'franchise' => :'franchise',
        :'date' => :'date',
        :'reference' => :'reference',
        :'sender' => :'sender',
        :'receiver' => :'receiver',
        :'weight' => :'weight',
        :'observations' => :'observations',
        :'delivery_on_saturday' => :'deliveryOnSaturday',
        :'declared_value' => :'declaredValue',
        :'insured_value' => :'insuredValue',
        :'cash_on_delivery_value' => :'cashOnDeliveryValue'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'shipment_code' => :'String',
        :'ccc' => :'Integer',
        :'franchise' => :'Integer',
        :'date' => :'String',
        :'reference' => :'String',
        :'sender' => :'EditActor',
        :'receiver' => :'EditActor',
        :'weight' => :'Float',
        :'observations' => :'String',
        :'delivery_on_saturday' => :'BOOLEAN',
        :'declared_value' => :'ValueShipment',
        :'insured_value' => :'ValueShipment',
        :'cash_on_delivery_value' => :'CashDeliveryValueShipment'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'shipmentCode')
        self.shipment_code = attributes[:'shipmentCode']
      end

      if attributes.has_key?(:'ccc')
        self.ccc = attributes[:'ccc']
      end

      if attributes.has_key?(:'franchise')
        self.franchise = attributes[:'franchise']
      end

      if attributes.has_key?(:'date')
        self.date = attributes[:'date']
      end

      if attributes.has_key?(:'reference')
        self.reference = attributes[:'reference']
      end

      if attributes.has_key?(:'sender')
        self.sender = attributes[:'sender']
      end

      if attributes.has_key?(:'receiver')
        self.receiver = attributes[:'receiver']
      end

      if attributes.has_key?(:'weight')
        self.weight = attributes[:'weight']
      end

      if attributes.has_key?(:'observations')
        self.observations = attributes[:'observations']
      end

      if attributes.has_key?(:'deliveryOnSaturday')
        self.delivery_on_saturday = attributes[:'deliveryOnSaturday']
      end

      if attributes.has_key?(:'declaredValue')
        self.declared_value = attributes[:'declaredValue']
      end

      if attributes.has_key?(:'insuredValue')
        self.insured_value = attributes[:'insuredValue']
      end

      if attributes.has_key?(:'cashOnDeliveryValue')
        self.cash_on_delivery_value = attributes[:'cashOnDeliveryValue']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@observations.nil? && @observations.to_s.length > 100
        invalid_properties.push('invalid value for "observations", the character length must be smaller than or equal to 100.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@observations.nil? && @observations.to_s.length > 100
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] observations Value to be assigned
    def observations=(observations)
      if !observations.nil? && observations.to_s.length > 100
        fail ArgumentError, 'invalid value for "observations", the character length must be smaller than or equal to 100.'
      end

      @observations = observations
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          shipment_code == o.shipment_code &&
          ccc == o.ccc &&
          franchise == o.franchise &&
          date == o.date &&
          reference == o.reference &&
          sender == o.sender &&
          receiver == o.receiver &&
          weight == o.weight &&
          observations == o.observations &&
          delivery_on_saturday == o.delivery_on_saturday &&
          declared_value == o.declared_value &&
          insured_value == o.insured_value &&
          cash_on_delivery_value == o.cash_on_delivery_value
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [shipment_code, ccc, franchise, date, reference, sender, receiver, weight, observations, delivery_on_saturday, declared_value, insured_value, cash_on_delivery_value].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
