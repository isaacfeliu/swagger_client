=begin
#SEUR Public API

#<b>INFORMATION ABOUT THE API</b>  <b>AUTH</b>  All requests must be accompanied by an authentication header with a 'Bearer ' obtained through the SSO token URL:  https://servicios.apipre.seur.io/pic_token  <i>Simple cURL Example</i>  curl -X POST --data-urlencode \"grant_type=client_credentials\" --data-urlencode \"client_id=<>\" --data-urlencode \"client_secret=<>\" https://servicios.apipre.seur.io/pic_token

OpenAPI spec version: 1.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.39

=end

require 'date'

module SwaggerClient
  class RoutingOZRequestBody
    attr_accessor :destination_partner

    attr_accessor :origin_partner

    attr_accessor :parcels

    attr_accessor :customer_id

    attr_accessor :cash_on_delivery

    attr_accessor :valid_ntc_route

    attr_accessor :valid_city_name

    attr_accessor :incoterms_code

    # Customs goods value must be C, D, N or S
    attr_accessor :customs_goods_code

    attr_accessor :goods_type

    attr_accessor :country_iso_code

    attr_accessor :int_product_code

    attr_accessor :product_code

    attr_accessor :int_service_code

    attr_accessor :service_code

    attr_accessor :taric_code

    attr_accessor :packing_type

    attr_accessor :shipment_type

    attr_accessor :zop_type

    attr_accessor :postal_code

    attr_accessor :origin_depot

    attr_accessor :city_name

    attr_accessor :shipment_weigth

    attr_accessor :visible_on_the_internet

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'destination_partner' => :'destinationPartner',
        :'origin_partner' => :'originPartner',
        :'parcels' => :'parcels',
        :'customer_id' => :'customerId',
        :'cash_on_delivery' => :'cashOnDelivery',
        :'valid_ntc_route' => :'validNtcRoute',
        :'valid_city_name' => :'validCityName',
        :'incoterms_code' => :'incotermsCode',
        :'customs_goods_code' => :'customsGoodsCode',
        :'goods_type' => :'goodsType',
        :'country_iso_code' => :'countryISOCode',
        :'int_product_code' => :'intProductCode',
        :'product_code' => :'productCode',
        :'int_service_code' => :'intServiceCode',
        :'service_code' => :'serviceCode',
        :'taric_code' => :'taricCode',
        :'packing_type' => :'packingType',
        :'shipment_type' => :'shipmentType',
        :'zop_type' => :'zopType',
        :'postal_code' => :'postalCode',
        :'origin_depot' => :'originDepot',
        :'city_name' => :'cityName',
        :'shipment_weigth' => :'shipmentWeigth',
        :'visible_on_the_internet' => :'visibleOnTheInternet'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'destination_partner' => :'Integer',
        :'origin_partner' => :'Integer',
        :'parcels' => :'Array<ParcelRoutingOZInput>',
        :'customer_id' => :'String',
        :'cash_on_delivery' => :'String',
        :'valid_ntc_route' => :'String',
        :'valid_city_name' => :'String',
        :'incoterms_code' => :'Integer',
        :'customs_goods_code' => :'String',
        :'goods_type' => :'Integer',
        :'country_iso_code' => :'String',
        :'int_product_code' => :'Integer',
        :'product_code' => :'Integer',
        :'int_service_code' => :'Integer',
        :'service_code' => :'Integer',
        :'taric_code' => :'Integer',
        :'packing_type' => :'Integer',
        :'shipment_type' => :'Integer',
        :'zop_type' => :'Integer',
        :'postal_code' => :'String',
        :'origin_depot' => :'Integer',
        :'city_name' => :'String',
        :'shipment_weigth' => :'Integer',
        :'visible_on_the_internet' => :'BOOLEAN'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'destinationPartner')
        self.destination_partner = attributes[:'destinationPartner']
      end

      if attributes.has_key?(:'originPartner')
        self.origin_partner = attributes[:'originPartner']
      end

      if attributes.has_key?(:'parcels')
        if (value = attributes[:'parcels']).is_a?(Array)
          self.parcels = value
        end
      end

      if attributes.has_key?(:'customerId')
        self.customer_id = attributes[:'customerId']
      end

      if attributes.has_key?(:'cashOnDelivery')
        self.cash_on_delivery = attributes[:'cashOnDelivery']
      end

      if attributes.has_key?(:'validNtcRoute')
        self.valid_ntc_route = attributes[:'validNtcRoute']
      end

      if attributes.has_key?(:'validCityName')
        self.valid_city_name = attributes[:'validCityName']
      end

      if attributes.has_key?(:'incotermsCode')
        self.incoterms_code = attributes[:'incotermsCode']
      end

      if attributes.has_key?(:'customsGoodsCode')
        self.customs_goods_code = attributes[:'customsGoodsCode']
      end

      if attributes.has_key?(:'goodsType')
        self.goods_type = attributes[:'goodsType']
      end

      if attributes.has_key?(:'countryISOCode')
        self.country_iso_code = attributes[:'countryISOCode']
      end

      if attributes.has_key?(:'intProductCode')
        self.int_product_code = attributes[:'intProductCode']
      end

      if attributes.has_key?(:'productCode')
        self.product_code = attributes[:'productCode']
      end

      if attributes.has_key?(:'intServiceCode')
        self.int_service_code = attributes[:'intServiceCode']
      end

      if attributes.has_key?(:'serviceCode')
        self.service_code = attributes[:'serviceCode']
      end

      if attributes.has_key?(:'taricCode')
        self.taric_code = attributes[:'taricCode']
      end

      if attributes.has_key?(:'packingType')
        self.packing_type = attributes[:'packingType']
      end

      if attributes.has_key?(:'shipmentType')
        self.shipment_type = attributes[:'shipmentType']
      end

      if attributes.has_key?(:'zopType')
        self.zop_type = attributes[:'zopType']
      end

      if attributes.has_key?(:'postalCode')
        self.postal_code = attributes[:'postalCode']
      end

      if attributes.has_key?(:'originDepot')
        self.origin_depot = attributes[:'originDepot']
      end

      if attributes.has_key?(:'cityName')
        self.city_name = attributes[:'cityName']
      end

      if attributes.has_key?(:'shipmentWeigth')
        self.shipment_weigth = attributes[:'shipmentWeigth']
      end

      if attributes.has_key?(:'visibleOnTheInternet')
        self.visible_on_the_internet = attributes[:'visibleOnTheInternet']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @country_iso_code.nil?
        invalid_properties.push('invalid value for "country_iso_code", country_iso_code cannot be nil.')
      end

      if @shipment_type.nil?
        invalid_properties.push('invalid value for "shipment_type", shipment_type cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @country_iso_code.nil?
      return false if @shipment_type.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          destination_partner == o.destination_partner &&
          origin_partner == o.origin_partner &&
          parcels == o.parcels &&
          customer_id == o.customer_id &&
          cash_on_delivery == o.cash_on_delivery &&
          valid_ntc_route == o.valid_ntc_route &&
          valid_city_name == o.valid_city_name &&
          incoterms_code == o.incoterms_code &&
          customs_goods_code == o.customs_goods_code &&
          goods_type == o.goods_type &&
          country_iso_code == o.country_iso_code &&
          int_product_code == o.int_product_code &&
          product_code == o.product_code &&
          int_service_code == o.int_service_code &&
          service_code == o.service_code &&
          taric_code == o.taric_code &&
          packing_type == o.packing_type &&
          shipment_type == o.shipment_type &&
          zop_type == o.zop_type &&
          postal_code == o.postal_code &&
          origin_depot == o.origin_depot &&
          city_name == o.city_name &&
          shipment_weigth == o.shipment_weigth &&
          visible_on_the_internet == o.visible_on_the_internet
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [destination_partner, origin_partner, parcels, customer_id, cash_on_delivery, valid_ntc_route, valid_city_name, incoterms_code, customs_goods_code, goods_type, country_iso_code, int_product_code, product_code, int_service_code, service_code, taric_code, packing_type, shipment_type, zop_type, postal_code, origin_depot, city_name, shipment_weigth, visible_on_the_internet].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
