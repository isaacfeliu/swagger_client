=begin
#SEUR Public API

#<b>INFORMATION ABOUT THE API</b>  <b>AUTH</b>  All requests must be accompanied by an authentication header with a 'Bearer ' obtained through the SSO token URL:  https://servicios.apipre.seur.io/pic_token  <i>Simple cURL Example</i>  curl -X POST --data-urlencode \"grant_type=client_credentials\" --data-urlencode \"client_id=<>\" --data-urlencode \"client_secret=<>\" https://servicios.apipre.seur.io/pic_token

OpenAPI spec version: 1.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.39

=end

require 'uri'

module SwaggerClient
  class CollectionsServicesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Cancel existing collection
    # Cancel existing collection
    # @param authorization Bearer token obtained from SSO
    # @param [Hash] opts the optional parameters
    # @option opts [Collection] :collection Collection codes to cancel
    # @return [CollectionCancelResponse]
    def pic_v1_collections_cancel_post(authorization, opts = {})
      data, _status_code, _headers = pic_v1_collections_cancel_post_with_http_info(authorization, opts)
      data
    end

    # Cancel existing collection
    # Cancel existing collection
    # @param authorization Bearer token obtained from SSO
    # @param [Hash] opts the optional parameters
    # @option opts [Collection] :collection Collection codes to cancel
    # @return [Array<(CollectionCancelResponse, Fixnum, Hash)>] CollectionCancelResponse data, response status code and response headers
    def pic_v1_collections_cancel_post_with_http_info(authorization, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CollectionsServicesApi.pic_v1_collections_cancel_post ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling CollectionsServicesApi.pic_v1_collections_cancel_post"
      end
      # resource path
      local_var_path = '/pic/v1/collections/cancel'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json;charset=UTF-8'])
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'collection'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CollectionCancelResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CollectionsServicesApi#pic_v1_collections_cancel_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a new collection
    # Create a new collection: The customer can only create pickups for the ccc it has access
    # @param authorization Bearer token obtained from SSO
    # @param [Hash] opts the optional parameters
    # @option opts [CollectionRequestBody] :input The pickup to create
    # @return [CollectionResponse]
    def pic_v1_collections_post(authorization, opts = {})
      data, _status_code, _headers = pic_v1_collections_post_with_http_info(authorization, opts)
      data
    end

    # Create a new collection
    # Create a new collection: The customer can only create pickups for the ccc it has access
    # @param authorization Bearer token obtained from SSO
    # @param [Hash] opts the optional parameters
    # @option opts [CollectionRequestBody] :input The pickup to create
    # @return [Array<(CollectionResponse, Fixnum, Hash)>] CollectionResponse data, response status code and response headers
    def pic_v1_collections_post_with_http_info(authorization, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CollectionsServicesApi.pic_v1_collections_post ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling CollectionsServicesApi.pic_v1_collections_post"
      end
      # resource path
      local_var_path = '/pic/v1/collections'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json;charset=UTF-8'])
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'input'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CollectionResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CollectionsServicesApi#pic_v1_collections_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get time-slot from collection
    # Get time slots
    # @param authorization Bearer token obtained from SSO
    # @param origin_city_code Origin City Code. Example: 480001
    # @param product_code Product Code. Example: 2
    # @param service_code Service Code. Example: 1
    # @param origin_business_unit Origin Business Unit. Example: 48
    # @param postal_code Postal Code. Example: 47010
    # @param [Hash] opts the optional parameters
    # @option opts [String] :current_system_date Current System Date. Example: \&quot;2020-09-17\&quot;
    # @option opts [String] :requested_date Requested date. Example: 2020-09-20
    # @option opts [String] :destination_business_unit Destination Business Unit. Example: 28
    # @option opts [String] :destination_city_code Destination City Code. Example: 28
    # @option opts [String] :current_system_time Current System Time. Example: 12:30
    # @return [TimeSlotResponse]
    def pic_v1_collections_time_slots_get(authorization, origin_city_code, product_code, service_code, origin_business_unit, postal_code, opts = {})
      data, _status_code, _headers = pic_v1_collections_time_slots_get_with_http_info(authorization, origin_city_code, product_code, service_code, origin_business_unit, postal_code, opts)
      data
    end

    # Get time-slot from collection
    # Get time slots
    # @param authorization Bearer token obtained from SSO
    # @param origin_city_code Origin City Code. Example: 480001
    # @param product_code Product Code. Example: 2
    # @param service_code Service Code. Example: 1
    # @param origin_business_unit Origin Business Unit. Example: 48
    # @param postal_code Postal Code. Example: 47010
    # @param [Hash] opts the optional parameters
    # @option opts [String] :current_system_date Current System Date. Example: \&quot;2020-09-17\&quot;
    # @option opts [String] :requested_date Requested date. Example: 2020-09-20
    # @option opts [String] :destination_business_unit Destination Business Unit. Example: 28
    # @option opts [String] :destination_city_code Destination City Code. Example: 28
    # @option opts [String] :current_system_time Current System Time. Example: 12:30
    # @return [Array<(TimeSlotResponse, Fixnum, Hash)>] TimeSlotResponse data, response status code and response headers
    def pic_v1_collections_time_slots_get_with_http_info(authorization, origin_city_code, product_code, service_code, origin_business_unit, postal_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CollectionsServicesApi.pic_v1_collections_time_slots_get ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling CollectionsServicesApi.pic_v1_collections_time_slots_get"
      end
      # verify the required parameter 'origin_city_code' is set
      if @api_client.config.client_side_validation && origin_city_code.nil?
        fail ArgumentError, "Missing the required parameter 'origin_city_code' when calling CollectionsServicesApi.pic_v1_collections_time_slots_get"
      end
      # verify the required parameter 'product_code' is set
      if @api_client.config.client_side_validation && product_code.nil?
        fail ArgumentError, "Missing the required parameter 'product_code' when calling CollectionsServicesApi.pic_v1_collections_time_slots_get"
      end
      # verify the required parameter 'service_code' is set
      if @api_client.config.client_side_validation && service_code.nil?
        fail ArgumentError, "Missing the required parameter 'service_code' when calling CollectionsServicesApi.pic_v1_collections_time_slots_get"
      end
      # verify the required parameter 'origin_business_unit' is set
      if @api_client.config.client_side_validation && origin_business_unit.nil?
        fail ArgumentError, "Missing the required parameter 'origin_business_unit' when calling CollectionsServicesApi.pic_v1_collections_time_slots_get"
      end
      # verify the required parameter 'postal_code' is set
      if @api_client.config.client_side_validation && postal_code.nil?
        fail ArgumentError, "Missing the required parameter 'postal_code' when calling CollectionsServicesApi.pic_v1_collections_time_slots_get"
      end
      # resource path
      local_var_path = '/pic/v1/collections/time-slots'

      # query parameters
      query_params = {}
      query_params[:'originCityCode'] = origin_city_code
      query_params[:'productCode'] = product_code
      query_params[:'serviceCode'] = service_code
      query_params[:'originBusinessUnit'] = origin_business_unit
      query_params[:'postalCode'] = postal_code
      query_params[:'currentSystemDate'] = opts[:'current_system_date'] if !opts[:'current_system_date'].nil?
      query_params[:'requestedDate'] = opts[:'requested_date'] if !opts[:'requested_date'].nil?
      query_params[:'destinationBusinessUnit'] = opts[:'destination_business_unit'] if !opts[:'destination_business_unit'].nil?
      query_params[:'destinationCityCode'] = opts[:'destination_city_code'] if !opts[:'destination_city_code'].nil?
      query_params[:'currentSystemTime'] = opts[:'current_system_time'] if !opts[:'current_system_time'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TimeSlotResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CollectionsServicesApi#pic_v1_collections_time_slots_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
