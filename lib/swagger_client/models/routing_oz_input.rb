=begin
#SEUR Public API

#<b>INFORMATION ABOUT THE API</b>  <b>AUTH</b>  All requests must be accompanied by an authentication header with a 'Bearer ' obtained through the SSO token URL:  https://servicios.apipre.seur.io/pic_token  <i>Simple cURL Example</i>  curl -X POST --data-urlencode \"grant_type=client_credentials\" --data-urlencode \"client_id=<>\" --data-urlencode \"client_secret=<>\" https://servicios.apipre.seur.io/pic_token

OpenAPI spec version: 1.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.39

=end

require 'date'

module SwaggerClient
  class RoutingOZInput
    attr_accessor :routing_oz_code

    attr_accessor :depot

    attr_accessor :depot_partner

    attr_accessor :hub_id

    attr_accessor :partner_hub_id

    attr_accessor :int_service_code

    attr_accessor :int_product_code

    attr_accessor :service_code

    attr_accessor :product_code

    attr_accessor :event_location

    attr_accessor :event_type

    attr_accessor :event_code

    attr_accessor :priority

    attr_accessor :origin_partner_id

    attr_accessor :line

    attr_accessor :import_depot

    attr_accessor :nomenclator

    attr_accessor :seur_center_id

    attr_accessor :depot_route_id

    attr_accessor :o_sort

    attr_accessor :d_sort

    attr_accessor :grouping

    attr_accessor :origin_partner_name

    attr_accessor :destination_partner_name

    attr_accessor :depot_name

    attr_accessor :hub_name

    attr_accessor :routing_oz_name

    attr_accessor :depot_route_name

    attr_accessor :max_parcels_shipment

    attr_accessor :max_weigth

    attr_accessor :max_weigth_shipment

    attr_accessor :max_volume

    attr_accessor :max_perimeter

    attr_accessor :max_size

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'routing_oz_code' => :'routingOZCode',
        :'depot' => :'depot',
        :'depot_partner' => :'depotPartner',
        :'hub_id' => :'hubId',
        :'partner_hub_id' => :'partnerHubId',
        :'int_service_code' => :'intServiceCode',
        :'int_product_code' => :'intProductCode',
        :'service_code' => :'serviceCode',
        :'product_code' => :'productCode',
        :'event_location' => :'eventLocation',
        :'event_type' => :'eventType',
        :'event_code' => :'eventCode',
        :'priority' => :'priority',
        :'origin_partner_id' => :'originPartnerId',
        :'line' => :'line',
        :'import_depot' => :'importDepot',
        :'nomenclator' => :'nomenclator',
        :'seur_center_id' => :'seurCenterId',
        :'depot_route_id' => :'depotRouteId',
        :'o_sort' => :'oSort',
        :'d_sort' => :'dSort',
        :'grouping' => :'grouping',
        :'origin_partner_name' => :'originPartnerName',
        :'destination_partner_name' => :'destinationPartnerName',
        :'depot_name' => :'depotName',
        :'hub_name' => :'hubName',
        :'routing_oz_name' => :'routingOZName',
        :'depot_route_name' => :'depotRouteName',
        :'max_parcels_shipment' => :'maxParcelsShipment',
        :'max_weigth' => :'maxWeigth',
        :'max_weigth_shipment' => :'maxWeigthShipment',
        :'max_volume' => :'maxVolume',
        :'max_perimeter' => :'maxPerimeter',
        :'max_size' => :'maxSize'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'routing_oz_code' => :'Integer',
        :'depot' => :'Integer',
        :'depot_partner' => :'Integer',
        :'hub_id' => :'Integer',
        :'partner_hub_id' => :'Integer',
        :'int_service_code' => :'Integer',
        :'int_product_code' => :'Integer',
        :'service_code' => :'Integer',
        :'product_code' => :'Integer',
        :'event_location' => :'String',
        :'event_type' => :'String',
        :'event_code' => :'Integer',
        :'priority' => :'Integer',
        :'origin_partner_id' => :'Integer',
        :'line' => :'Integer',
        :'import_depot' => :'Integer',
        :'nomenclator' => :'Integer',
        :'seur_center_id' => :'Integer',
        :'depot_route_id' => :'String',
        :'o_sort' => :'String',
        :'d_sort' => :'String',
        :'grouping' => :'String',
        :'origin_partner_name' => :'String',
        :'destination_partner_name' => :'String',
        :'depot_name' => :'String',
        :'hub_name' => :'String',
        :'routing_oz_name' => :'String',
        :'depot_route_name' => :'String',
        :'max_parcels_shipment' => :'Float',
        :'max_weigth' => :'Float',
        :'max_weigth_shipment' => :'Float',
        :'max_volume' => :'Float',
        :'max_perimeter' => :'Float',
        :'max_size' => :'Float'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'routingOZCode')
        self.routing_oz_code = attributes[:'routingOZCode']
      end

      if attributes.has_key?(:'depot')
        self.depot = attributes[:'depot']
      end

      if attributes.has_key?(:'depotPartner')
        self.depot_partner = attributes[:'depotPartner']
      end

      if attributes.has_key?(:'hubId')
        self.hub_id = attributes[:'hubId']
      end

      if attributes.has_key?(:'partnerHubId')
        self.partner_hub_id = attributes[:'partnerHubId']
      end

      if attributes.has_key?(:'intServiceCode')
        self.int_service_code = attributes[:'intServiceCode']
      end

      if attributes.has_key?(:'intProductCode')
        self.int_product_code = attributes[:'intProductCode']
      end

      if attributes.has_key?(:'serviceCode')
        self.service_code = attributes[:'serviceCode']
      end

      if attributes.has_key?(:'productCode')
        self.product_code = attributes[:'productCode']
      end

      if attributes.has_key?(:'eventLocation')
        self.event_location = attributes[:'eventLocation']
      end

      if attributes.has_key?(:'eventType')
        self.event_type = attributes[:'eventType']
      end

      if attributes.has_key?(:'eventCode')
        self.event_code = attributes[:'eventCode']
      end

      if attributes.has_key?(:'priority')
        self.priority = attributes[:'priority']
      end

      if attributes.has_key?(:'originPartnerId')
        self.origin_partner_id = attributes[:'originPartnerId']
      end

      if attributes.has_key?(:'line')
        self.line = attributes[:'line']
      end

      if attributes.has_key?(:'importDepot')
        self.import_depot = attributes[:'importDepot']
      end

      if attributes.has_key?(:'nomenclator')
        self.nomenclator = attributes[:'nomenclator']
      end

      if attributes.has_key?(:'seurCenterId')
        self.seur_center_id = attributes[:'seurCenterId']
      end

      if attributes.has_key?(:'depotRouteId')
        self.depot_route_id = attributes[:'depotRouteId']
      end

      if attributes.has_key?(:'oSort')
        self.o_sort = attributes[:'oSort']
      end

      if attributes.has_key?(:'dSort')
        self.d_sort = attributes[:'dSort']
      end

      if attributes.has_key?(:'grouping')
        self.grouping = attributes[:'grouping']
      end

      if attributes.has_key?(:'originPartnerName')
        self.origin_partner_name = attributes[:'originPartnerName']
      end

      if attributes.has_key?(:'destinationPartnerName')
        self.destination_partner_name = attributes[:'destinationPartnerName']
      end

      if attributes.has_key?(:'depotName')
        self.depot_name = attributes[:'depotName']
      end

      if attributes.has_key?(:'hubName')
        self.hub_name = attributes[:'hubName']
      end

      if attributes.has_key?(:'routingOZName')
        self.routing_oz_name = attributes[:'routingOZName']
      end

      if attributes.has_key?(:'depotRouteName')
        self.depot_route_name = attributes[:'depotRouteName']
      end

      if attributes.has_key?(:'maxParcelsShipment')
        self.max_parcels_shipment = attributes[:'maxParcelsShipment']
      end

      if attributes.has_key?(:'maxWeigth')
        self.max_weigth = attributes[:'maxWeigth']
      end

      if attributes.has_key?(:'maxWeigthShipment')
        self.max_weigth_shipment = attributes[:'maxWeigthShipment']
      end

      if attributes.has_key?(:'maxVolume')
        self.max_volume = attributes[:'maxVolume']
      end

      if attributes.has_key?(:'maxPerimeter')
        self.max_perimeter = attributes[:'maxPerimeter']
      end

      if attributes.has_key?(:'maxSize')
        self.max_size = attributes[:'maxSize']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          routing_oz_code == o.routing_oz_code &&
          depot == o.depot &&
          depot_partner == o.depot_partner &&
          hub_id == o.hub_id &&
          partner_hub_id == o.partner_hub_id &&
          int_service_code == o.int_service_code &&
          int_product_code == o.int_product_code &&
          service_code == o.service_code &&
          product_code == o.product_code &&
          event_location == o.event_location &&
          event_type == o.event_type &&
          event_code == o.event_code &&
          priority == o.priority &&
          origin_partner_id == o.origin_partner_id &&
          line == o.line &&
          import_depot == o.import_depot &&
          nomenclator == o.nomenclator &&
          seur_center_id == o.seur_center_id &&
          depot_route_id == o.depot_route_id &&
          o_sort == o.o_sort &&
          d_sort == o.d_sort &&
          grouping == o.grouping &&
          origin_partner_name == o.origin_partner_name &&
          destination_partner_name == o.destination_partner_name &&
          depot_name == o.depot_name &&
          hub_name == o.hub_name &&
          routing_oz_name == o.routing_oz_name &&
          depot_route_name == o.depot_route_name &&
          max_parcels_shipment == o.max_parcels_shipment &&
          max_weigth == o.max_weigth &&
          max_weigth_shipment == o.max_weigth_shipment &&
          max_volume == o.max_volume &&
          max_perimeter == o.max_perimeter &&
          max_size == o.max_size
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [routing_oz_code, depot, depot_partner, hub_id, partner_hub_id, int_service_code, int_product_code, service_code, product_code, event_location, event_type, event_code, priority, origin_partner_id, line, import_depot, nomenclator, seur_center_id, depot_route_id, o_sort, d_sort, grouping, origin_partner_name, destination_partner_name, depot_name, hub_name, routing_oz_name, depot_route_name, max_parcels_shipment, max_weigth, max_weigth_shipment, max_volume, max_perimeter, max_size].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
