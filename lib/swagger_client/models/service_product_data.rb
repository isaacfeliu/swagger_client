=begin
#SEUR Public API

#<b>INFORMATION ABOUT THE API</b>  <b>AUTH</b>  All requests must be accompanied by an authentication header with a 'Bearer ' obtained through the SSO token URL:  https://servicios.apipre.seur.io/pic_token  <i>Simple cURL Example</i>  curl -X POST --data-urlencode \"grant_type=client_credentials\" --data-urlencode \"client_id=<>\" --data-urlencode \"client_secret=<>\" https://servicios.apipre.seur.io/pic_token

OpenAPI spec version: 1.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.39

=end

require 'date'

module SwaggerClient
  class ServiceProductData
    attr_accessor :service_code

    attr_accessor :product_code

    attr_accessor :service_name

    attr_accessor :service_short_name

    attr_accessor :saturday_delivery_code

    attr_accessor :city_allows_delivery_on_saturday

    attr_accessor :customs_shipping

    attr_accessor :medium_type

    attr_accessor :max_height

    attr_accessor :max_width

    attr_accessor :max_length

    attr_accessor :max_expedition_kg

    attr_accessor :max_parcel_kg

    attr_accessor :max_expedition_parcel

    attr_accessor :cb2c_gs

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'service_code' => :'serviceCode',
        :'product_code' => :'productCode',
        :'service_name' => :'serviceName',
        :'service_short_name' => :'serviceShortName',
        :'saturday_delivery_code' => :'saturdayDeliveryCode',
        :'city_allows_delivery_on_saturday' => :'cityAllowsDeliveryOnSaturday',
        :'customs_shipping' => :'customsShipping',
        :'medium_type' => :'mediumType',
        :'max_height' => :'maxHeight',
        :'max_width' => :'maxWidth',
        :'max_length' => :'maxLength',
        :'max_expedition_kg' => :'maxExpeditionKg',
        :'max_parcel_kg' => :'maxParcelKg',
        :'max_expedition_parcel' => :'maxExpeditionParcel',
        :'cb2c_gs' => :'cb2cGs'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'service_code' => :'String',
        :'product_code' => :'String',
        :'service_name' => :'String',
        :'service_short_name' => :'String',
        :'saturday_delivery_code' => :'String',
        :'city_allows_delivery_on_saturday' => :'String',
        :'customs_shipping' => :'String',
        :'medium_type' => :'String',
        :'max_height' => :'String',
        :'max_width' => :'String',
        :'max_length' => :'String',
        :'max_expedition_kg' => :'String',
        :'max_parcel_kg' => :'String',
        :'max_expedition_parcel' => :'String',
        :'cb2c_gs' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'serviceCode')
        self.service_code = attributes[:'serviceCode']
      end

      if attributes.has_key?(:'productCode')
        self.product_code = attributes[:'productCode']
      end

      if attributes.has_key?(:'serviceName')
        self.service_name = attributes[:'serviceName']
      end

      if attributes.has_key?(:'serviceShortName')
        self.service_short_name = attributes[:'serviceShortName']
      end

      if attributes.has_key?(:'saturdayDeliveryCode')
        self.saturday_delivery_code = attributes[:'saturdayDeliveryCode']
      end

      if attributes.has_key?(:'cityAllowsDeliveryOnSaturday')
        self.city_allows_delivery_on_saturday = attributes[:'cityAllowsDeliveryOnSaturday']
      end

      if attributes.has_key?(:'customsShipping')
        self.customs_shipping = attributes[:'customsShipping']
      end

      if attributes.has_key?(:'mediumType')
        self.medium_type = attributes[:'mediumType']
      end

      if attributes.has_key?(:'maxHeight')
        self.max_height = attributes[:'maxHeight']
      end

      if attributes.has_key?(:'maxWidth')
        self.max_width = attributes[:'maxWidth']
      end

      if attributes.has_key?(:'maxLength')
        self.max_length = attributes[:'maxLength']
      end

      if attributes.has_key?(:'maxExpeditionKg')
        self.max_expedition_kg = attributes[:'maxExpeditionKg']
      end

      if attributes.has_key?(:'maxParcelKg')
        self.max_parcel_kg = attributes[:'maxParcelKg']
      end

      if attributes.has_key?(:'maxExpeditionParcel')
        self.max_expedition_parcel = attributes[:'maxExpeditionParcel']
      end

      if attributes.has_key?(:'cb2cGs')
        self.cb2c_gs = attributes[:'cb2cGs']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          service_code == o.service_code &&
          product_code == o.product_code &&
          service_name == o.service_name &&
          service_short_name == o.service_short_name &&
          saturday_delivery_code == o.saturday_delivery_code &&
          city_allows_delivery_on_saturday == o.city_allows_delivery_on_saturday &&
          customs_shipping == o.customs_shipping &&
          medium_type == o.medium_type &&
          max_height == o.max_height &&
          max_width == o.max_width &&
          max_length == o.max_length &&
          max_expedition_kg == o.max_expedition_kg &&
          max_parcel_kg == o.max_parcel_kg &&
          max_expedition_parcel == o.max_expedition_parcel &&
          cb2c_gs == o.cb2c_gs
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [service_code, product_code, service_name, service_short_name, saturday_delivery_code, city_allows_delivery_on_saturday, customs_shipping, medium_type, max_height, max_width, max_length, max_expedition_kg, max_parcel_kg, max_expedition_parcel, cb2c_gs].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
