=begin
#SEUR Public API

#<b>INFORMATION ABOUT THE API</b>  <b>AUTH</b>  All requests must be accompanied by an authentication header with a 'Bearer ' obtained through the SSO token URL:  https://servicios.apipre.seur.io/pic_token  <i>Simple cURL Example</i>  curl -X POST --data-urlencode \"grant_type=client_credentials\" --data-urlencode \"client_id=<>\" --data-urlencode \"client_secret=<>\" https://servicios.apipre.seur.io/pic_token

OpenAPI spec version: 1.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.39

=end

require 'date'

module SwaggerClient
  class CollectionRequestBody
    attr_accessor :service_code

    attr_accessor :product_code

    attr_accessor :int_service_code

    attr_accessor :int_product_code

    # Values: [\"DAP\", \"DDP\"]
    attr_accessor :inco_terms

    attr_accessor :created

    attr_accessor :taric

    # The customs goods must be C, D, N or S
    attr_accessor :customs_goods_code

    attr_accessor :ref

    attr_accessor :collection_date

    attr_accessor :label

    attr_accessor :payer

    attr_accessor :customer

    attr_accessor :sender

    attr_accessor :receiver

    attr_accessor :return_actor

    attr_accessor :parcels

    attr_accessor :declared_value

    attr_accessor :insured_value

    attr_accessor :cash_on_delivery_value

    attr_accessor :observations

    attr_accessor :restrictions

    attr_accessor :driver_location

    attr_accessor :packages_number

    # Values S|N
    attr_accessor :security

    # Values S|N
    attr_accessor :d_sat

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'service_code' => :'serviceCode',
        :'product_code' => :'productCode',
        :'int_service_code' => :'intServiceCode',
        :'int_product_code' => :'intProductCode',
        :'inco_terms' => :'incoTerms',
        :'created' => :'created',
        :'taric' => :'taric',
        :'customs_goods_code' => :'customsGoodsCode',
        :'ref' => :'ref',
        :'collection_date' => :'collectionDate',
        :'label' => :'label',
        :'payer' => :'payer',
        :'customer' => :'customer',
        :'sender' => :'sender',
        :'receiver' => :'receiver',
        :'return_actor' => :'returnActor',
        :'parcels' => :'parcels',
        :'declared_value' => :'declaredValue',
        :'insured_value' => :'insuredValue',
        :'cash_on_delivery_value' => :'cashOnDeliveryValue',
        :'observations' => :'observations',
        :'restrictions' => :'restrictions',
        :'driver_location' => :'driverLocation',
        :'packages_number' => :'packagesNumber',
        :'security' => :'security',
        :'d_sat' => :'dSat'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'service_code' => :'Integer',
        :'product_code' => :'Integer',
        :'int_service_code' => :'Integer',
        :'int_product_code' => :'Integer',
        :'inco_terms' => :'String',
        :'created' => :'Integer',
        :'taric' => :'Float',
        :'customs_goods_code' => :'String',
        :'ref' => :'String',
        :'collection_date' => :'DateTime',
        :'label' => :'BOOLEAN',
        :'payer' => :'String',
        :'customer' => :'ActorCustomer',
        :'sender' => :'ActorSender',
        :'receiver' => :'ActorReceiver',
        :'return_actor' => :'ReturnActor',
        :'parcels' => :'Array<Parcel>',
        :'declared_value' => :'Float',
        :'insured_value' => :'Float',
        :'cash_on_delivery_value' => :'Float',
        :'observations' => :'String',
        :'restrictions' => :'Array<Restrictions>',
        :'driver_location' => :'BOOLEAN',
        :'packages_number' => :'Integer',
        :'security' => :'String',
        :'d_sat' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'serviceCode')
        self.service_code = attributes[:'serviceCode']
      end

      if attributes.has_key?(:'productCode')
        self.product_code = attributes[:'productCode']
      end

      if attributes.has_key?(:'intServiceCode')
        self.int_service_code = attributes[:'intServiceCode']
      end

      if attributes.has_key?(:'intProductCode')
        self.int_product_code = attributes[:'intProductCode']
      end

      if attributes.has_key?(:'incoTerms')
        self.inco_terms = attributes[:'incoTerms']
      end

      if attributes.has_key?(:'created')
        self.created = attributes[:'created']
      end

      if attributes.has_key?(:'taric')
        self.taric = attributes[:'taric']
      end

      if attributes.has_key?(:'customsGoodsCode')
        self.customs_goods_code = attributes[:'customsGoodsCode']
      end

      if attributes.has_key?(:'ref')
        self.ref = attributes[:'ref']
      end

      if attributes.has_key?(:'collectionDate')
        self.collection_date = attributes[:'collectionDate']
      end

      if attributes.has_key?(:'label')
        self.label = attributes[:'label']
      end

      if attributes.has_key?(:'payer')
        self.payer = attributes[:'payer']
      end

      if attributes.has_key?(:'customer')
        self.customer = attributes[:'customer']
      end

      if attributes.has_key?(:'sender')
        self.sender = attributes[:'sender']
      end

      if attributes.has_key?(:'receiver')
        self.receiver = attributes[:'receiver']
      end

      if attributes.has_key?(:'returnActor')
        self.return_actor = attributes[:'returnActor']
      end

      if attributes.has_key?(:'parcels')
        if (value = attributes[:'parcels']).is_a?(Array)
          self.parcels = value
        end
      end

      if attributes.has_key?(:'declaredValue')
        self.declared_value = attributes[:'declaredValue']
      end

      if attributes.has_key?(:'insuredValue')
        self.insured_value = attributes[:'insuredValue']
      end

      if attributes.has_key?(:'cashOnDeliveryValue')
        self.cash_on_delivery_value = attributes[:'cashOnDeliveryValue']
      end

      if attributes.has_key?(:'observations')
        self.observations = attributes[:'observations']
      end

      if attributes.has_key?(:'restrictions')
        if (value = attributes[:'restrictions']).is_a?(Array)
          self.restrictions = value
        end
      end

      if attributes.has_key?(:'driverLocation')
        self.driver_location = attributes[:'driverLocation']
      end

      if attributes.has_key?(:'packagesNumber')
        self.packages_number = attributes[:'packagesNumber']
      end

      if attributes.has_key?(:'security')
        self.security = attributes[:'security']
      end

      if attributes.has_key?(:'dSat')
        self.d_sat = attributes[:'dSat']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @service_code.nil?
        invalid_properties.push('invalid value for "service_code", service_code cannot be nil.')
      end

      if @product_code.nil?
        invalid_properties.push('invalid value for "product_code", product_code cannot be nil.')
      end

      if @ref.nil?
        invalid_properties.push('invalid value for "ref", ref cannot be nil.')
      end

      if @ref.to_s.length > 30
        invalid_properties.push('invalid value for "ref", the character length must be smaller than or equal to 30.')
      end

      if @collection_date.nil?
        invalid_properties.push('invalid value for "collection_date", collection_date cannot be nil.')
      end

      if @payer.nil?
        invalid_properties.push('invalid value for "payer", payer cannot be nil.')
      end

      if @customer.nil?
        invalid_properties.push('invalid value for "customer", customer cannot be nil.')
      end

      if @sender.nil?
        invalid_properties.push('invalid value for "sender", sender cannot be nil.')
      end

      if @receiver.nil?
        invalid_properties.push('invalid value for "receiver", receiver cannot be nil.')
      end

      if @parcels.nil?
        invalid_properties.push('invalid value for "parcels", parcels cannot be nil.')
      end

      if @declared_value.nil?
        invalid_properties.push('invalid value for "declared_value", declared_value cannot be nil.')
      end

      if @insured_value.nil?
        invalid_properties.push('invalid value for "insured_value", insured_value cannot be nil.')
      end

      if @cash_on_delivery_value.nil?
        invalid_properties.push('invalid value for "cash_on_delivery_value", cash_on_delivery_value cannot be nil.')
      end

      if !@observations.nil? && @observations.to_s.length > 100
        invalid_properties.push('invalid value for "observations", the character length must be smaller than or equal to 100.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @service_code.nil?
      return false if @product_code.nil?
      return false if @ref.nil?
      return false if @ref.to_s.length > 30
      return false if @collection_date.nil?
      return false if @payer.nil?
      return false if @customer.nil?
      return false if @sender.nil?
      return false if @receiver.nil?
      return false if @parcels.nil?
      return false if @declared_value.nil?
      return false if @insured_value.nil?
      return false if @cash_on_delivery_value.nil?
      return false if !@observations.nil? && @observations.to_s.length > 100
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] ref Value to be assigned
    def ref=(ref)
      if ref.nil?
        fail ArgumentError, 'ref cannot be nil'
      end

      if ref.to_s.length > 30
        fail ArgumentError, 'invalid value for "ref", the character length must be smaller than or equal to 30.'
      end

      @ref = ref
    end

    # Custom attribute writer method with validation
    # @param [Object] observations Value to be assigned
    def observations=(observations)
      if !observations.nil? && observations.to_s.length > 100
        fail ArgumentError, 'invalid value for "observations", the character length must be smaller than or equal to 100.'
      end

      @observations = observations
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          service_code == o.service_code &&
          product_code == o.product_code &&
          int_service_code == o.int_service_code &&
          int_product_code == o.int_product_code &&
          inco_terms == o.inco_terms &&
          created == o.created &&
          taric == o.taric &&
          customs_goods_code == o.customs_goods_code &&
          ref == o.ref &&
          collection_date == o.collection_date &&
          label == o.label &&
          payer == o.payer &&
          customer == o.customer &&
          sender == o.sender &&
          receiver == o.receiver &&
          return_actor == o.return_actor &&
          parcels == o.parcels &&
          declared_value == o.declared_value &&
          insured_value == o.insured_value &&
          cash_on_delivery_value == o.cash_on_delivery_value &&
          observations == o.observations &&
          restrictions == o.restrictions &&
          driver_location == o.driver_location &&
          packages_number == o.packages_number &&
          security == o.security &&
          d_sat == o.d_sat
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [service_code, product_code, int_service_code, int_product_code, inco_terms, created, taric, customs_goods_code, ref, collection_date, label, payer, customer, sender, receiver, return_actor, parcels, declared_value, insured_value, cash_on_delivery_value, observations, restrictions, driver_location, packages_number, security, d_sat].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
